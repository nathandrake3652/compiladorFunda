    lex.py: 924:lex: tokens   = ['COMA', 'CORIZQ', 'CORDER', 'PTCOMA', 'LLAVIZQ', 'LLAVDER', 'PARIZQ', 'PARDER', 'IGUAL', 'MAS', 'MENOS', 'POR', 'DIVIDIDO', 'CONCAT', 'MENQUE', 'MAYQUE', 'IGUALQUE', 'NIGUALQUE', 'OR', 'AND', 'NOT', 'DECIMAL', 'ENTERO', 'CADENA', 'ID', 'LISTA', 'NUMERO', 'BOOLEANO', 'TEXTO', 'IMPRIMIR', 'MIENTRAS', 'IF', 'ELSE', 'DEF', 'RETURN', 'APPEND', 'DEL', 'TRUE', 'FALSE', 'FOR']
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_DECIMAL -> '\d+\.\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ENTERO -> '\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_TRUE -> 'True' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_FALSE -> 'False' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z_0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_CADENA -> '\".*?\"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_COMENTARIO_MULTILINEA -> '/\*(.|\n)*?\*/' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_COMENTARIO_SIMPLE -> '//.*\n' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR -> '\|\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PARIZQ -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PARDER -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MAS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_POR -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IGUALQUE -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NIGUALQUE -> '!=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND -> '&&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CORDER -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CORIZQ -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PTCOMA -> ';' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LLAVIZQ -> '{' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LLAVDER -> '}' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MENOS -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDIDO -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MENQUE -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MAYQUE -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IGUAL -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CONCAT -> '&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMA -> ',' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_DECIMAL>\d+\.\d+)|(?P<t_ENTERO>\d+)|(?P<t_TRUE>True)|(?P<t_FALSE>False)|(?P<t_ID>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_CADENA>\".*?\")|(?P<t_COMENTARIO_MULTILINEA>/\*(.|\n)*?\*/)|(?P<t_COMENTARIO_SIMPLE>//.*\n)|(?P<t_newline>\n+)|(?P<t_OR>\|\|)|(?P<t_PARIZQ>\()|(?P<t_PARDER>\))|(?P<t_MAS>\+)|(?P<t_POR>\*)|(?P<t_IGUALQUE>==)|(?P<t_NIGUALQUE>!=)|(?P<t_AND>&&)|(?P<t_CORDER>\])|(?P<t_CORIZQ>\[)|(?P<t_PTCOMA>;)|(?P<t_LLAVIZQ>{)|(?P<t_LLAVDER>})|(?P<t_MENOS>-)|(?P<t_DIVIDIDO>/)|(?P<t_MENQUE><)|(?P<t_MAYQUE>>)|(?P<t_IGUAL>=)|(?P<t_CONCAT>&)|(?P<t_NOT>!)|(?P<t_COMA>,)'
   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> init
   yacc.py:3381:Rule 1     init -> instrucciones
   yacc.py:3381:Rule 2     instrucciones -> instrucciones instruccion
   yacc.py:3381:Rule 3     instrucciones -> instruccion
   yacc.py:3381:Rule 4     instruccion -> imprimir_instr
   yacc.py:3381:Rule 5     instruccion -> definicion_instr
   yacc.py:3381:Rule 6     instruccion -> asignacion_instr
   yacc.py:3381:Rule 7     instruccion -> mientras_instr
   yacc.py:3381:Rule 8     instruccion -> if_instr
   yacc.py:3381:Rule 9     instruccion -> if_else_instr
   yacc.py:3381:Rule 10    instruccion -> def_funcion_instr
   yacc.py:3381:Rule 11    instruccion -> return_instr
   yacc.py:3381:Rule 12    instruccion -> llamada_funcion_instr
   yacc.py:3381:Rule 13    instruccion -> append_instr
   yacc.py:3381:Rule 14    instruccion -> del_instr
   yacc.py:3381:Rule 15    instruccion -> for_instr
   yacc.py:3381:Rule 16    imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:3381:Rule 17    tipo_def -> NUMERO
   yacc.py:3381:Rule 18    tipo_def -> LISTA
   yacc.py:3381:Rule 19    tipo_def -> BOOLEANO
   yacc.py:3381:Rule 20    tipo_def -> TEXTO
   yacc.py:3381:Rule 21    tipo_def -> ID
   yacc.py:3381:Rule 22    definicion_instr -> tipo_def ID PTCOMA
   yacc.py:3381:Rule 23    definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:3381:Rule 24    asignacion_instr -> ID IGUAL valor_asignacion PTCOMA
   yacc.py:3381:Rule 25    valor_asignacion -> expresion
   yacc.py:3381:Rule 26    expresion -> expresion_numerica
   yacc.py:3381:Rule 27    expresion -> expresion_logica
   yacc.py:3381:Rule 28    expresion -> expresion_concatenar
   yacc.py:3381:Rule 29    expresion -> expresion_acceso_lista
   yacc.py:3381:Rule 30    expresion -> llamada_funcion_expr
   yacc.py:3381:Rule 31    expresion -> expresion_agrupada
   yacc.py:3381:Rule 32    expresion -> constantes
   yacc.py:3381:Rule 33    expresion -> expresion_lista
   yacc.py:3381:Rule 34    expresion -> id
   yacc.py:3381:Rule 35    expresion_agrupada -> PARIZQ expresion PARDER
   yacc.py:3381:Rule 36    constantes -> ENTERO
   yacc.py:3381:Rule 37    constantes -> DECIMAL
   yacc.py:3381:Rule 38    constantes -> CADENA
   yacc.py:3381:Rule 39    id -> ID
   yacc.py:3381:Rule 40    mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:3381:Rule 41    for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:3381:Rule 42    if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:3381:Rule 43    if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:3381:Rule 44    expresion_numerica -> expresion MAS expresion
   yacc.py:3381:Rule 45    expresion_numerica -> expresion MENOS expresion
   yacc.py:3381:Rule 46    expresion_numerica -> expresion POR expresion
   yacc.py:3381:Rule 47    expresion_numerica -> expresion DIVIDIDO expresion
   yacc.py:3381:Rule 48    expresion_numerica -> MENOS expresion
   yacc.py:3381:Rule 49    expresion_concatenar -> expresion CONCAT expresion
   yacc.py:3381:Rule 50    expresion_logica -> expresion MAYQUE expresion
   yacc.py:3381:Rule 51    expresion_logica -> expresion MENQUE expresion
   yacc.py:3381:Rule 52    expresion_logica -> expresion IGUALQUE expresion
   yacc.py:3381:Rule 53    expresion_logica -> expresion NIGUALQUE expresion
   yacc.py:3381:Rule 54    expresion_logica -> expresion OR expresion
   yacc.py:3381:Rule 55    expresion_logica -> expresion AND expresion
   yacc.py:3381:Rule 56    expresion_logica -> TRUE
   yacc.py:3381:Rule 57    expresion_logica -> FALSE
   yacc.py:3381:Rule 58    expresion_logica -> NOT expresion
   yacc.py:3381:Rule 59    empty -> <empty>
   yacc.py:3381:Rule 60    def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:3381:Rule 61    lista_parametros -> parametros
   yacc.py:3381:Rule 62    lista_parametros -> empty
   yacc.py:3381:Rule 63    parametros -> parametros COMA tipo_def ID
   yacc.py:3381:Rule 64    parametros -> tipo_def ID
   yacc.py:3381:Rule 65    return_instr -> RETURN expresion PTCOMA
   yacc.py:3381:Rule 66    return_instr -> RETURN PTCOMA
   yacc.py:3381:Rule 67    lista_expresiones -> lista_expresiones COMA expresion
   yacc.py:3381:Rule 68    lista_expresiones -> expresion
   yacc.py:3381:Rule 69    llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER
   yacc.py:3381:Rule 70    llamada_funcion_expr -> ID PARIZQ PARDER
   yacc.py:3381:Rule 71    llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:3381:Rule 72    llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA
   yacc.py:3381:Rule 73    expresion_lista -> CORIZQ lista_expresiones CORDER
   yacc.py:3381:Rule 74    expresion_lista -> CORIZQ CORDER
   yacc.py:3381:Rule 75    expresion_acceso_lista -> ID CORIZQ expresion CORDER
   yacc.py:3381:Rule 76    append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:3381:Rule 77    del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405:AND                  : 55
   yacc.py:3405:APPEND               : 76
   yacc.py:3405:BOOLEANO             : 19
   yacc.py:3405:CADENA               : 38
   yacc.py:3405:COMA                 : 63 67 76
   yacc.py:3405:CONCAT               : 49
   yacc.py:3405:CORDER               : 73 74 75 77
   yacc.py:3405:CORIZQ               : 73 74 75 77
   yacc.py:3405:DECIMAL              : 37
   yacc.py:3405:DEF                  : 60
   yacc.py:3405:DEL                  : 77
   yacc.py:3405:DIVIDIDO             : 47
   yacc.py:3405:ELSE                 : 43
   yacc.py:3405:ENTERO               : 36
   yacc.py:3405:FALSE                : 57
   yacc.py:3405:FOR                  : 41
   yacc.py:3405:ID                   : 21 22 23 24 39 60 63 64 69 70 71 72 75 76 76 77
   yacc.py:3405:IF                   : 42 43
   yacc.py:3405:IGUAL                : 23 24 76
   yacc.py:3405:IGUALQUE             : 52
   yacc.py:3405:IMPRIMIR             : 16
   yacc.py:3405:LISTA                : 18
   yacc.py:3405:LLAVDER              : 40 41 42 43 43 60
   yacc.py:3405:LLAVIZQ              : 40 41 42 43 43 60
   yacc.py:3405:MAS                  : 44
   yacc.py:3405:MAYQUE               : 50
   yacc.py:3405:MENOS                : 45 48
   yacc.py:3405:MENQUE               : 51
   yacc.py:3405:MIENTRAS             : 40
   yacc.py:3405:NIGUALQUE            : 53
   yacc.py:3405:NOT                  : 58
   yacc.py:3405:NUMERO               : 17
   yacc.py:3405:OR                   : 54
   yacc.py:3405:PARDER               : 16 35 40 41 42 43 60 69 70 71 72 76
   yacc.py:3405:PARIZQ               : 16 35 40 41 42 43 60 69 70 71 72 76
   yacc.py:3405:POR                  : 46
   yacc.py:3405:PTCOMA               : 16 22 23 24 41 65 66 71 72 76 77
   yacc.py:3405:RETURN               : 65 66
   yacc.py:3405:TEXTO                : 20
   yacc.py:3405:TRUE                 : 56
   yacc.py:3405:error                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:append_instr         : 13
   yacc.py:3413:asignacion_instr     : 6 41
   yacc.py:3413:constantes           : 32
   yacc.py:3413:def_funcion_instr    : 10
   yacc.py:3413:definicion_instr     : 5 41
   yacc.py:3413:del_instr            : 14
   yacc.py:3413:empty                : 62
   yacc.py:3413:expresion            : 16 25 35 44 44 45 45 46 46 47 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 58 65 67 68 75 76 77
   yacc.py:3413:expresion_acceso_lista : 29
   yacc.py:3413:expresion_agrupada   : 31
   yacc.py:3413:expresion_concatenar : 28
   yacc.py:3413:expresion_lista      : 33
   yacc.py:3413:expresion_logica     : 27 40 41 42 43
   yacc.py:3413:expresion_numerica   : 26
   yacc.py:3413:for_instr            : 15
   yacc.py:3413:id                   : 34
   yacc.py:3413:if_else_instr        : 9
   yacc.py:3413:if_instr             : 8
   yacc.py:3413:imprimir_instr       : 4
   yacc.py:3413:init                 : 0
   yacc.py:3413:instruccion          : 2 3
   yacc.py:3413:instrucciones        : 1 2 40 41 42 43 43 60
   yacc.py:3413:lista_expresiones    : 67 69 71 73
   yacc.py:3413:lista_parametros     : 60
   yacc.py:3413:llamada_funcion_expr : 30
   yacc.py:3413:llamada_funcion_instr : 12
   yacc.py:3413:mientras_instr       : 7
   yacc.py:3413:parametros           : 61 63
   yacc.py:3413:return_instr         : 11
   yacc.py:3413:tipo_def             : 22 23 63 64
   yacc.py:3413:valor_asignacion     : 23 24
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . init
   yacc.py:2565:    (1) init -> . instrucciones
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    init                           shift and go to state 1
   yacc.py:2714:    instrucciones                  shift and go to state 2
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> init .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (1) init -> instrucciones .
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 1 (init -> instrucciones .)
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (3) instrucciones -> instruccion .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    ID              reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    MIENTRAS        reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    IF              reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    DEF             reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    DEL             reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    FOR             reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    NUMERO          reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    LISTA           reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    BOOLEANO        reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    TEXTO           reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    $end            reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2687:    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (4) instruccion -> imprimir_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    DEF             reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    DEL             reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    LISTA           reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (5) instruccion -> definicion_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    ID              reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    IF              reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    DEF             reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    RETURN          reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    DEL             reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    FOR             reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    LISTA           reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    $end            reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 5 (instruccion -> definicion_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (6) instruccion -> asignacion_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    ID              reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    IF              reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    DEF             reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    RETURN          reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    DEL             reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    FOR             reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    LISTA           reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    $end            reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 6 (instruccion -> asignacion_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (7) instruccion -> mientras_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    ID              reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    IF              reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    DEF             reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    RETURN          reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    DEL             reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    FOR             reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    LISTA           reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    $end            reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 7 (instruccion -> mientras_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (8) instruccion -> if_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    ID              reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    IF              reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    DEF             reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    RETURN          reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    DEL             reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    FOR             reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    LISTA           reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    $end            reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 8 (instruccion -> if_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (9) instruccion -> if_else_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    ID              reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    IF              reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    DEF             reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    RETURN          reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    DEL             reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    FOR             reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    LISTA           reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    $end            reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 9 (instruccion -> if_else_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (10) instruccion -> def_funcion_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    ID              reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    IF              reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    DEF             reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    RETURN          reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    DEL             reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    FOR             reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    LISTA           reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    $end            reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 10 (instruccion -> def_funcion_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (11) instruccion -> return_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    ID              reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    IF              reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    DEF             reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    RETURN          reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    DEL             reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    FOR             reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    LISTA           reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    $end            reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 11 (instruccion -> return_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (12) instruccion -> llamada_funcion_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    ID              reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    IF              reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    DEF             reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    RETURN          reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    DEL             reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    FOR             reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    LISTA           reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    $end            reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 12 (instruccion -> llamada_funcion_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (13) instruccion -> append_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    ID              reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    IF              reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    DEF             reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    RETURN          reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    DEL             reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    FOR             reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    LISTA           reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    $end            reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 13 (instruccion -> append_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (14) instruccion -> del_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    ID              reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    IF              reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    DEF             reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    RETURN          reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    DEL             reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    FOR             reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    LISTA           reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    $end            reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 14 (instruccion -> del_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (15) instruccion -> for_instr .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    ID              reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    MIENTRAS        reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    IF              reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    DEF             reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    RETURN          reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    DEL             reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    FOR             reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    NUMERO          reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    LISTA           reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    BOOLEANO        reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    TEXTO           reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    $end            reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2687:    LLAVDER         reduce using rule 15 (instruccion -> for_instr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (16) imprimir_instr -> IMPRIMIR . PARIZQ expresion PARDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 30
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (22) definicion_instr -> tipo_def . ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> tipo_def . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 31
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID . IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> ID . PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> ID . PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> ID . IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (21) tipo_def -> ID .
   yacc.py:2566:
   yacc.py:2687:    IGUAL           shift and go to state 32
   yacc.py:2687:    PARIZQ          shift and go to state 33
   yacc.py:2687:    ID              reduce using rule 21 (tipo_def -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 34
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 35
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF . ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 36
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (65) return_instr -> RETURN . expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> RETURN . PTCOMA
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 38
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 37
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL . ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 58
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR . PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (17) tipo_def -> NUMERO .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 17 (tipo_def -> NUMERO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (18) tipo_def -> LISTA .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 18 (tipo_def -> LISTA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (19) tipo_def -> BOOLEANO .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 19 (tipo_def -> BOOLEANO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (20) tipo_def -> TEXTO .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 20 (tipo_def -> TEXTO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (2) instrucciones -> instrucciones instruccion .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    DEF             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    DEL             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    NUMERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    LISTA           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    BOOLEANO        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    TEXTO           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2687:    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (16) imprimir_instr -> IMPRIMIR PARIZQ . expresion PARDER PTCOMA
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 60
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (22) definicion_instr -> tipo_def ID . PTCOMA
   yacc.py:2565:    (23) definicion_instr -> tipo_def ID . IGUAL valor_asignacion PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 61
   yacc.py:2687:    IGUAL           shift and go to state 62
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID IGUAL . valor_asignacion PTCOMA
   yacc.py:2565:    (76) append_instr -> ID IGUAL . APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (25) valor_asignacion -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    APPEND          shift and go to state 64
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    valor_asignacion               shift and go to state 63
   yacc.py:2714:    expresion                      shift and go to state 65
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (71) llamada_funcion_instr -> ID PARIZQ . lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> ID PARIZQ . PARDER PTCOMA
   yacc.py:2565:    (67) lista_expresiones -> . lista_expresiones COMA expresion
   yacc.py:2565:    (68) lista_expresiones -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 67
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    lista_expresiones              shift and go to state 66
   yacc.py:2714:    expresion                      shift and go to state 68
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion_logica               shift and go to state 69
   yacc.py:2714:    expresion                      shift and go to state 70
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion_logica               shift and go to state 71
   yacc.py:2714:    expresion                      shift and go to state 70
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID . PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 72
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (65) return_instr -> RETURN expresion . PTCOMA
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 73
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (66) return_instr -> RETURN PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 66 (return_instr -> RETURN PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (26) expresion -> expresion_numerica .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    MAS             reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    MENOS           reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    POR             reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    MAYQUE          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    MENQUE          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    IGUALQUE        reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    OR              reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    AND             reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    CONCAT          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    PARDER          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    COMA            reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2687:    CORDER          reduce using rule 26 (expresion -> expresion_numerica .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (27) expresion -> expresion_logica .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MAS             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENOS           reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    POR             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MAYQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    IGUALQUE        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    OR              reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    AND             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    CONCAT          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    PARDER          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    COMA            reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    CORDER          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (28) expresion -> expresion_concatenar .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    MAS             reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    MENOS           reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    POR             reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    MAYQUE          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    MENQUE          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    IGUALQUE        reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    OR              reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    AND             reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    CONCAT          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    PARDER          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    COMA            reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2687:    CORDER          reduce using rule 28 (expresion -> expresion_concatenar .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (29) expresion -> expresion_acceso_lista .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    MAS             reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    MENOS           reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    POR             reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    MAYQUE          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    MENQUE          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    IGUALQUE        reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    OR              reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    AND             reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    CONCAT          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    PARDER          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    COMA            reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2687:    CORDER          reduce using rule 29 (expresion -> expresion_acceso_lista .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (30) expresion -> llamada_funcion_expr .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    MAS             reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    MENOS           reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    POR             reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    MAYQUE          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    MENQUE          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    IGUALQUE        reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    OR              reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    AND             reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    CONCAT          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    PARDER          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    COMA            reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2687:    CORDER          reduce using rule 30 (expresion -> llamada_funcion_expr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (31) expresion -> expresion_agrupada .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    MAS             reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    MENOS           reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    POR             reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    MAYQUE          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    MENQUE          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    IGUALQUE        reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    OR              reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    AND             reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    CONCAT          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    PARDER          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    COMA            reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2687:    CORDER          reduce using rule 31 (expresion -> expresion_agrupada .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (32) expresion -> constantes .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    MAS             reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    MENOS           reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    POR             reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    MAYQUE          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    MENQUE          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    IGUALQUE        reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    OR              reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    AND             reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    CONCAT          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    PARDER          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    COMA            reduce using rule 32 (expresion -> constantes .)
   yacc.py:2687:    CORDER          reduce using rule 32 (expresion -> constantes .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (33) expresion -> expresion_lista .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    MAS             reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    MENOS           reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    POR             reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    MAYQUE          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    MENQUE          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    IGUALQUE        reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    OR              reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    AND             reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    CONCAT          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    PARDER          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    COMA            reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2687:    CORDER          reduce using rule 33 (expresion -> expresion_lista .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (34) expresion -> id .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    MAS             reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    MENOS           reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    POR             reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    MAYQUE          reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    MENQUE          reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    IGUALQUE        reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    OR              reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    AND             reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    CONCAT          reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    PARDER          reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    COMA            reduce using rule 34 (expresion -> id .)
   yacc.py:2687:    CORDER          reduce using rule 34 (expresion -> id .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (48) expresion_numerica -> MENOS . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 85
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (56) expresion_logica -> TRUE .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    MAS             reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    MENOS           reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    POR             reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    MAYQUE          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    MENQUE          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    IGUALQUE        reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    OR              reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    AND             reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    CONCAT          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    PARDER          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    COMA            reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2687:    CORDER          reduce using rule 56 (expresion_logica -> TRUE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (57) expresion_logica -> FALSE .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    MAS             reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    MENOS           reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    POR             reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    MAYQUE          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    MENQUE          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    IGUALQUE        reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    OR              reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    AND             reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    CONCAT          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    PARDER          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    COMA            reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2687:    CORDER          reduce using rule 57 (expresion_logica -> FALSE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (58) expresion_logica -> NOT . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 86
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (75) expresion_acceso_lista -> ID . CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> ID . PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> ID . PARIZQ PARDER
   yacc.py:2565:    (39) id -> ID .
   yacc.py:2566:
   yacc.py:2687:    CORIZQ          shift and go to state 87
   yacc.py:2687:    PARIZQ          shift and go to state 88
   yacc.py:2687:    PTCOMA          reduce using rule 39 (id -> ID .)
   yacc.py:2687:    MAS             reduce using rule 39 (id -> ID .)
   yacc.py:2687:    MENOS           reduce using rule 39 (id -> ID .)
   yacc.py:2687:    POR             reduce using rule 39 (id -> ID .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 39 (id -> ID .)
   yacc.py:2687:    MAYQUE          reduce using rule 39 (id -> ID .)
   yacc.py:2687:    MENQUE          reduce using rule 39 (id -> ID .)
   yacc.py:2687:    IGUALQUE        reduce using rule 39 (id -> ID .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 39 (id -> ID .)
   yacc.py:2687:    OR              reduce using rule 39 (id -> ID .)
   yacc.py:2687:    AND             reduce using rule 39 (id -> ID .)
   yacc.py:2687:    CONCAT          reduce using rule 39 (id -> ID .)
   yacc.py:2687:    PARDER          reduce using rule 39 (id -> ID .)
   yacc.py:2687:    COMA            reduce using rule 39 (id -> ID .)
   yacc.py:2687:    CORDER          reduce using rule 39 (id -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (73) expresion_lista -> CORIZQ . lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> CORIZQ . CORDER
   yacc.py:2565:    (67) lista_expresiones -> . lista_expresiones COMA expresion
   yacc.py:2565:    (68) lista_expresiones -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    CORDER          shift and go to state 90
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    lista_expresiones              shift and go to state 89
   yacc.py:2714:    expresion                      shift and go to state 68
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (35) expresion_agrupada -> PARIZQ . expresion PARDER
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 91
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (36) constantes -> ENTERO .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    MAS             reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    MENOS           reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    POR             reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    MAYQUE          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    MENQUE          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    IGUALQUE        reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    OR              reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    AND             reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    CONCAT          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    PARDER          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    COMA            reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2687:    CORDER          reduce using rule 36 (constantes -> ENTERO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (37) constantes -> DECIMAL .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    MAS             reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    MENOS           reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    POR             reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    MAYQUE          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    MENQUE          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    IGUALQUE        reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    OR              reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    AND             reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    CONCAT          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    PARDER          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    COMA            reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2687:    CORDER          reduce using rule 37 (constantes -> DECIMAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (38) constantes -> CADENA .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    MAS             reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    MENOS           reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    POR             reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    MAYQUE          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    MENQUE          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    IGUALQUE        reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    OR              reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    AND             reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    CONCAT          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    PARDER          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    COMA            reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2687:    CORDER          reduce using rule 38 (constantes -> CADENA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL ID . CORIZQ expresion CORDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    CORIZQ          shift and go to state 92
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ . definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2689:
   yacc.py:2714:    definicion_instr               shift and go to state 93
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (16) imprimir_instr -> IMPRIMIR PARIZQ expresion . PARDER PTCOMA
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 95
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (22) definicion_instr -> tipo_def ID PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    TRUE            reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    FALSE           reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    NOT             reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    MENOS           reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    PARIZQ          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    ENTERO          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    DECIMAL         reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    CADENA          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    CORIZQ          reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 22 (definicion_instr -> tipo_def ID PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (23) definicion_instr -> tipo_def ID IGUAL . valor_asignacion PTCOMA
   yacc.py:2565:    (25) valor_asignacion -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    valor_asignacion               shift and go to state 96
   yacc.py:2714:    expresion                      shift and go to state 65
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID IGUAL valor_asignacion . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 97
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND . PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PARIZQ          shift and go to state 98
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (25) valor_asignacion -> expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 25 (valor_asignacion -> expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (71) llamada_funcion_instr -> ID PARIZQ lista_expresiones . PARDER PTCOMA
   yacc.py:2565:    (67) lista_expresiones -> lista_expresiones . COMA expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 99
   yacc.py:2687:    COMA            shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (72) llamada_funcion_instr -> ID PARIZQ PARDER . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 101
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (68) lista_expresiones -> expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          reduce using rule 68 (lista_expresiones -> expresion .)
   yacc.py:2687:    COMA            reduce using rule 68 (lista_expresiones -> expresion .)
   yacc.py:2687:    CORDER          reduce using rule 68 (lista_expresiones -> expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (27) expresion -> expresion_logica .
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 102
   yacc.py:2687:    MAYQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    IGUALQUE        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    OR              reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    AND             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MAS             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENOS           reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    POR             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    CONCAT          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (27) expresion -> expresion_logica .
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 103
   yacc.py:2687:    MAYQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    IGUALQUE        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    OR              reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    AND             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MAS             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENOS           reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    POR             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    CONCAT          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ . lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (61) lista_parametros -> . parametros
   yacc.py:2565:    (62) lista_parametros -> . empty
   yacc.py:2565:    (63) parametros -> . parametros COMA tipo_def ID
   yacc.py:2565:    (64) parametros -> . tipo_def ID
   yacc.py:2565:    (59) empty -> .
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    PARDER          reduce using rule 59 (empty -> .)
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2689:
   yacc.py:2714:    lista_parametros               shift and go to state 104
   yacc.py:2714:    parametros                     shift and go to state 105
   yacc.py:2714:    empty                          shift and go to state 106
   yacc.py:2714:    tipo_def                       shift and go to state 107
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (65) return_instr -> RETURN expresion PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 65 (return_instr -> RETURN expresion PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (44) expresion_numerica -> expresion MAS . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 108
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (45) expresion_numerica -> expresion MENOS . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 109
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (46) expresion_numerica -> expresion POR . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 110
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (47) expresion_numerica -> expresion DIVIDIDO . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 111
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (50) expresion_logica -> expresion MAYQUE . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 112
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (51) expresion_logica -> expresion MENQUE . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 113
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (52) expresion_logica -> expresion IGUALQUE . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 114
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (53) expresion_logica -> expresion NIGUALQUE . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 115
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (54) expresion_logica -> expresion OR . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 116
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (55) expresion_logica -> expresion AND . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 117
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (49) expresion_concatenar -> expresion CONCAT . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 118
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (48) expresion_numerica -> MENOS expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    MAS             reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    MENOS           reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    POR             reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    OR              reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    AND             reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    PARDER          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    COMA            reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2687:    CORDER          reduce using rule 48 (expresion_numerica -> MENOS expresion .)
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! POR             [ shift and go to state 76 ]
   yacc.py:2696:  ! DIVIDIDO        [ shift and go to state 77 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (58) expresion_logica -> NOT expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    MAS             reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    MENOS           reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    POR             reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    OR              reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    AND             reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    PARDER          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    COMA            reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2687:    CORDER          reduce using rule 58 (expresion_logica -> NOT expresion .)
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! POR             [ shift and go to state 76 ]
   yacc.py:2696:  ! DIVIDIDO        [ shift and go to state 77 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (75) expresion_acceso_lista -> ID CORIZQ . expresion CORDER
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 119
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (69) llamada_funcion_expr -> ID PARIZQ . lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> ID PARIZQ . PARDER
   yacc.py:2565:    (67) lista_expresiones -> . lista_expresiones COMA expresion
   yacc.py:2565:    (68) lista_expresiones -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 121
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    lista_expresiones              shift and go to state 120
   yacc.py:2714:    expresion                      shift and go to state 68
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (73) expresion_lista -> CORIZQ lista_expresiones . CORDER
   yacc.py:2565:    (67) lista_expresiones -> lista_expresiones . COMA expresion
   yacc.py:2566:
   yacc.py:2687:    CORDER          shift and go to state 122
   yacc.py:2687:    COMA            shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (74) expresion_lista -> CORIZQ CORDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    MAS             reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    MENOS           reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    POR             reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    MENQUE          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    OR              reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    AND             reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    CONCAT          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    PARDER          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    COMA            reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2687:    CORDER          reduce using rule 74 (expresion_lista -> CORIZQ CORDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (35) expresion_agrupada -> PARIZQ expresion . PARDER
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 123
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL ID CORIZQ . expresion CORDER PTCOMA
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 124
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr . expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion_logica               shift and go to state 125
   yacc.py:2714:    expresion                      shift and go to state 70
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (21) tipo_def -> ID .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 21 (tipo_def -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (16) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 126
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (23) definicion_instr -> tipo_def ID IGUAL valor_asignacion . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 127
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    PARDER          reduce using rule 24 (asignacion_instr -> ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ . ID COMA expresion PARDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 128
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (71) llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 129
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (67) lista_expresiones -> lista_expresiones COMA . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 130
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (72) llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 72 (llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    LLAVIZQ         shift and go to state 131
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    LLAVIZQ         shift and go to state 132
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ lista_parametros . PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 133
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (61) lista_parametros -> parametros .
   yacc.py:2565:    (63) parametros -> parametros . COMA tipo_def ID
   yacc.py:2566:
   yacc.py:2687:    PARDER          reduce using rule 61 (lista_parametros -> parametros .)
   yacc.py:2687:    COMA            shift and go to state 134
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (62) lista_parametros -> empty .
   yacc.py:2566:
   yacc.py:2687:    PARDER          reduce using rule 62 (lista_parametros -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (64) parametros -> tipo_def . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 135
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (44) expresion_numerica -> expresion MAS expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    MAS             reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    MENOS           reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    OR              reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    AND             reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    PARDER          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    COMA            reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    CORDER          reduce using rule 44 (expresion_numerica -> expresion MAS expresion .)
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! POR             [ reduce using rule 44 (expresion_numerica -> expresion MAS expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 44 (expresion_numerica -> expresion MAS expresion .) ]
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 109
   yacc.py:2563:
   yacc.py:2565:    (45) expresion_numerica -> expresion MENOS expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    MAS             reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    MENOS           reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    OR              reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    AND             reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    PARDER          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    COMA            reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    CORDER          reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .)
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! POR             [ reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 45 (expresion_numerica -> expresion MENOS expresion .) ]
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 110
   yacc.py:2563:
   yacc.py:2565:    (46) expresion_numerica -> expresion POR expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    MAS             reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    MENOS           reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    POR             reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    OR              reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    AND             reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    PARDER          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    COMA            reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2687:    CORDER          reduce using rule 46 (expresion_numerica -> expresion POR expresion .)
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! POR             [ shift and go to state 76 ]
   yacc.py:2696:  ! DIVIDIDO        [ shift and go to state 77 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 111
   yacc.py:2563:
   yacc.py:2565:    (47) expresion_numerica -> expresion DIVIDIDO expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    MAS             reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    MENOS           reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    POR             reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    OR              reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    AND             reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    PARDER          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    COMA            reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2687:    CORDER          reduce using rule 47 (expresion_numerica -> expresion DIVIDIDO expresion .)
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ shift and go to state 74 ]
   yacc.py:2696:  ! MENOS           [ shift and go to state 75 ]
   yacc.py:2696:  ! POR             [ shift and go to state 76 ]
   yacc.py:2696:  ! DIVIDIDO        [ shift and go to state 77 ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 112
   yacc.py:2563:
   yacc.py:2565:    (50) expresion_logica -> expresion MAYQUE expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    OR              reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    AND             reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    PARDER          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    COMA            reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    CORDER          reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 50 (expresion_logica -> expresion MAYQUE expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 113
   yacc.py:2563:
   yacc.py:2565:    (51) expresion_logica -> expresion MENQUE expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    OR              reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    AND             reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    PARDER          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    COMA            reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    CORDER          reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 51 (expresion_logica -> expresion MENQUE expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 114
   yacc.py:2563:
   yacc.py:2565:    (52) expresion_logica -> expresion IGUALQUE expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    OR              reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    AND             reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    PARDER          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    COMA            reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    CORDER          reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 52 (expresion_logica -> expresion IGUALQUE expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 115
   yacc.py:2563:
   yacc.py:2565:    (53) expresion_logica -> expresion NIGUALQUE expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    MAYQUE          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    MENQUE          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    IGUALQUE        reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    OR              reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    AND             reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    PARDER          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    COMA            reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    CORDER          reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 53 (expresion_logica -> expresion NIGUALQUE expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ shift and go to state 78 ]
   yacc.py:2696:  ! MENQUE          [ shift and go to state 79 ]
   yacc.py:2696:  ! IGUALQUE        [ shift and go to state 80 ]
   yacc.py:2696:  ! NIGUALQUE       [ shift and go to state 81 ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 116
   yacc.py:2563:
   yacc.py:2565:    (54) expresion_logica -> expresion OR expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    OR              reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    AND             reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    PARDER          reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    COMA            reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    CORDER          reduce using rule 54 (expresion_logica -> expresion OR expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! MENQUE          [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! IGUALQUE        [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! NIGUALQUE       [ reduce using rule 54 (expresion_logica -> expresion OR expresion .) ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 117
   yacc.py:2563:
   yacc.py:2565:    (55) expresion_logica -> expresion AND expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    OR              reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    AND             reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    PARDER          reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    COMA            reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    CORDER          reduce using rule 55 (expresion_logica -> expresion AND expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! MENQUE          [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! IGUALQUE        [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! NIGUALQUE       [ reduce using rule 55 (expresion_logica -> expresion AND expresion .) ]
   yacc.py:2696:  ! OR              [ shift and go to state 82 ]
   yacc.py:2696:  ! AND             [ shift and go to state 83 ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 118
   yacc.py:2563:
   yacc.py:2565:    (49) expresion_concatenar -> expresion CONCAT expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .)
   yacc.py:2687:    CONCAT          reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .)
   yacc.py:2687:    PARDER          reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .)
   yacc.py:2687:    COMA            reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .)
   yacc.py:2687:    CORDER          reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2689:
   yacc.py:2696:  ! MAS             [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! MENOS           [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! POR             [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! DIVIDIDO        [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! MAYQUE          [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! MENQUE          [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! IGUALQUE        [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! NIGUALQUE       [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 49 (expresion_concatenar -> expresion CONCAT expresion .) ]
   yacc.py:2696:  ! CONCAT          [ shift and go to state 84 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 119
   yacc.py:2563:
   yacc.py:2565:    (75) expresion_acceso_lista -> ID CORIZQ expresion . CORDER
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    CORDER          shift and go to state 136
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 120
   yacc.py:2563:
   yacc.py:2565:    (69) llamada_funcion_expr -> ID PARIZQ lista_expresiones . PARDER
   yacc.py:2565:    (67) lista_expresiones -> lista_expresiones . COMA expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 137
   yacc.py:2687:    COMA            shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 121
   yacc.py:2563:
   yacc.py:2565:    (70) llamada_funcion_expr -> ID PARIZQ PARDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    MAS             reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    MENOS           reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    POR             reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    MENQUE          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    OR              reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    AND             reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    CONCAT          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    PARDER          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    COMA            reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2687:    CORDER          reduce using rule 70 (llamada_funcion_expr -> ID PARIZQ PARDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 122
   yacc.py:2563:
   yacc.py:2565:    (73) expresion_lista -> CORIZQ lista_expresiones CORDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    MAS             reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    MENOS           reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    POR             reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    MENQUE          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    OR              reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    AND             reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    CONCAT          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    PARDER          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    COMA            reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2687:    CORDER          reduce using rule 73 (expresion_lista -> CORIZQ lista_expresiones CORDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 123
   yacc.py:2563:
   yacc.py:2565:    (35) expresion_agrupada -> PARIZQ expresion PARDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    MAS             reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    MENOS           reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    POR             reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    MENQUE          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    OR              reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    AND             reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    CONCAT          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    PARDER          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    COMA            reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2687:    CORDER          reduce using rule 35 (expresion_agrupada -> PARIZQ expresion PARDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 124
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL ID CORIZQ expresion . CORDER PTCOMA
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    CORDER          shift and go to state 138
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 125
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica . PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (27) expresion -> expresion_logica .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 139
   yacc.py:2687:    MAYQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENQUE          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    IGUALQUE        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    OR              reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    AND             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MAS             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    MENOS           reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    POR             reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2687:    CONCAT          reduce using rule 27 (expresion -> expresion_logica .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 126
   yacc.py:2563:
   yacc.py:2565:    (16) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 16 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 127
   yacc.py:2563:
   yacc.py:2565:    (23) definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    TRUE            reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    FALSE           reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    NOT             reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    MENOS           reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    PARIZQ          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    ENTERO          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    DECIMAL         reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    CADENA          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    CORIZQ          reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 23 (definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 128
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ ID . COMA expresion PARDER PTCOMA
   yacc.py:2566:
   yacc.py:2687:    COMA            shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 129
   yacc.py:2563:
   yacc.py:2565:    (71) llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 71 (llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 130
   yacc.py:2563:
   yacc.py:2565:    (67) lista_expresiones -> lista_expresiones COMA expresion .
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          reduce using rule 67 (lista_expresiones -> lista_expresiones COMA expresion .)
   yacc.py:2687:    COMA            reduce using rule 67 (lista_expresiones -> lista_expresiones COMA expresion .)
   yacc.py:2687:    CORDER          reduce using rule 67 (lista_expresiones -> lista_expresiones COMA expresion .)
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 131
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instrucciones                  shift and go to state 141
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 132
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instrucciones                  shift and go to state 142
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 133
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER . LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    LLAVIZQ         shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 134
   yacc.py:2563:
   yacc.py:2565:    (63) parametros -> parametros COMA . tipo_def ID
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2689:
   yacc.py:2714:    tipo_def                       shift and go to state 144
   yacc.py:2561:
   yacc.py:2562:state 135
   yacc.py:2563:
   yacc.py:2565:    (64) parametros -> tipo_def ID .
   yacc.py:2566:
   yacc.py:2687:    COMA            reduce using rule 64 (parametros -> tipo_def ID .)
   yacc.py:2687:    PARDER          reduce using rule 64 (parametros -> tipo_def ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 136
   yacc.py:2563:
   yacc.py:2565:    (75) expresion_acceso_lista -> ID CORIZQ expresion CORDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    MAS             reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    MENOS           reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    POR             reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    MENQUE          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    OR              reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    AND             reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    CONCAT          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    PARDER          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    COMA            reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2687:    CORDER          reduce using rule 75 (expresion_acceso_lista -> ID CORIZQ expresion CORDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 137
   yacc.py:2563:
   yacc.py:2565:    (69) llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    MAS             reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    MENOS           reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    POR             reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    DIVIDIDO        reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    MAYQUE          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    MENQUE          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    IGUALQUE        reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    NIGUALQUE       reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    OR              reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    AND             reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    CONCAT          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    PARDER          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    COMA            reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2687:    CORDER          reduce using rule 69 (llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 138
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL ID CORIZQ expresion CORDER . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 145
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 139
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA . asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 147
   yacc.py:2689:
   yacc.py:2714:    asignacion_instr               shift and go to state 146
   yacc.py:2561:
   yacc.py:2562:state 140
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ ID COMA . expresion PARDER PTCOMA
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    expresion                      shift and go to state 148
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 141
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    LLAVDER         shift and go to state 149
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 142
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    LLAVDER         shift and go to state 150
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 143
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ . instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instrucciones                  shift and go to state 151
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 144
   yacc.py:2563:
   yacc.py:2565:    (63) parametros -> parametros COMA tipo_def . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 152
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 145
   yacc.py:2563:
   yacc.py:2565:    (77) del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 77 (del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 146
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr . PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 153
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 147
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID . IGUAL valor_asignacion PTCOMA
   yacc.py:2566:
   yacc.py:2687:    IGUAL           shift and go to state 154
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 148
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion . PARDER PTCOMA
   yacc.py:2565:    (44) expresion_numerica -> expresion . MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> expresion . MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> expresion . POR expresion
   yacc.py:2565:    (47) expresion_numerica -> expresion . DIVIDIDO expresion
   yacc.py:2565:    (50) expresion_logica -> expresion . MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> expresion . MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> expresion . IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> expresion . NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> expresion . OR expresion
   yacc.py:2565:    (55) expresion_logica -> expresion . AND expresion
   yacc.py:2565:    (49) expresion_concatenar -> expresion . CONCAT expresion
   yacc.py:2566:
   yacc.py:2687:    PARDER          shift and go to state 155
   yacc.py:2687:    MAS             shift and go to state 74
   yacc.py:2687:    MENOS           shift and go to state 75
   yacc.py:2687:    POR             shift and go to state 76
   yacc.py:2687:    DIVIDIDO        shift and go to state 77
   yacc.py:2687:    MAYQUE          shift and go to state 78
   yacc.py:2687:    MENQUE          shift and go to state 79
   yacc.py:2687:    IGUALQUE        shift and go to state 80
   yacc.py:2687:    NIGUALQUE       shift and go to state 81
   yacc.py:2687:    OR              shift and go to state 82
   yacc.py:2687:    AND             shift and go to state 83
   yacc.py:2687:    CONCAT          shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 149
   yacc.py:2563:
   yacc.py:2565:    (40) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ID              reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    MIENTRAS        reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    IF              reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEF             reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    RETURN          reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEL             reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    FOR             reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    NUMERO          reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LISTA           reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    BOOLEANO        reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    TEXTO           reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    $end            reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LLAVDER         reduce using rule 40 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 150
   yacc.py:2563:
   yacc.py:2565:    (42) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ID              reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    MIENTRAS        reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    IF              reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEF             reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    RETURN          reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEL             reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    FOR             reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    NUMERO          reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LISTA           reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    BOOLEANO        reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    TEXTO           reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    $end            reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LLAVDER         reduce using rule 42 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ELSE            shift and go to state 156
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 151
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones . LLAVDER
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    LLAVDER         shift and go to state 157
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 152
   yacc.py:2563:
   yacc.py:2565:    (63) parametros -> parametros COMA tipo_def ID .
   yacc.py:2566:
   yacc.py:2687:    COMA            reduce using rule 63 (parametros -> parametros COMA tipo_def ID .)
   yacc.py:2687:    PARDER          reduce using rule 63 (parametros -> parametros COMA tipo_def ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 153
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER . LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    LLAVIZQ         shift and go to state 158
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 154
   yacc.py:2563:
   yacc.py:2565:    (24) asignacion_instr -> ID IGUAL . valor_asignacion PTCOMA
   yacc.py:2565:    (25) valor_asignacion -> . expresion
   yacc.py:2565:    (26) expresion -> . expresion_numerica
   yacc.py:2565:    (27) expresion -> . expresion_logica
   yacc.py:2565:    (28) expresion -> . expresion_concatenar
   yacc.py:2565:    (29) expresion -> . expresion_acceso_lista
   yacc.py:2565:    (30) expresion -> . llamada_funcion_expr
   yacc.py:2565:    (31) expresion -> . expresion_agrupada
   yacc.py:2565:    (32) expresion -> . constantes
   yacc.py:2565:    (33) expresion -> . expresion_lista
   yacc.py:2565:    (34) expresion -> . id
   yacc.py:2565:    (44) expresion_numerica -> . expresion MAS expresion
   yacc.py:2565:    (45) expresion_numerica -> . expresion MENOS expresion
   yacc.py:2565:    (46) expresion_numerica -> . expresion POR expresion
   yacc.py:2565:    (47) expresion_numerica -> . expresion DIVIDIDO expresion
   yacc.py:2565:    (48) expresion_numerica -> . MENOS expresion
   yacc.py:2565:    (50) expresion_logica -> . expresion MAYQUE expresion
   yacc.py:2565:    (51) expresion_logica -> . expresion MENQUE expresion
   yacc.py:2565:    (52) expresion_logica -> . expresion IGUALQUE expresion
   yacc.py:2565:    (53) expresion_logica -> . expresion NIGUALQUE expresion
   yacc.py:2565:    (54) expresion_logica -> . expresion OR expresion
   yacc.py:2565:    (55) expresion_logica -> . expresion AND expresion
   yacc.py:2565:    (56) expresion_logica -> . TRUE
   yacc.py:2565:    (57) expresion_logica -> . FALSE
   yacc.py:2565:    (58) expresion_logica -> . NOT expresion
   yacc.py:2565:    (49) expresion_concatenar -> . expresion CONCAT expresion
   yacc.py:2565:    (75) expresion_acceso_lista -> . ID CORIZQ expresion CORDER
   yacc.py:2565:    (69) llamada_funcion_expr -> . ID PARIZQ lista_expresiones PARDER
   yacc.py:2565:    (70) llamada_funcion_expr -> . ID PARIZQ PARDER
   yacc.py:2565:    (35) expresion_agrupada -> . PARIZQ expresion PARDER
   yacc.py:2565:    (36) constantes -> . ENTERO
   yacc.py:2565:    (37) constantes -> . DECIMAL
   yacc.py:2565:    (38) constantes -> . CADENA
   yacc.py:2565:    (73) expresion_lista -> . CORIZQ lista_expresiones CORDER
   yacc.py:2565:    (74) expresion_lista -> . CORIZQ CORDER
   yacc.py:2565:    (39) id -> . ID
   yacc.py:2566:
   yacc.py:2687:    MENOS           shift and go to state 48
   yacc.py:2687:    TRUE            shift and go to state 49
   yacc.py:2687:    FALSE           shift and go to state 50
   yacc.py:2687:    NOT             shift and go to state 51
   yacc.py:2687:    ID              shift and go to state 52
   yacc.py:2687:    PARIZQ          shift and go to state 54
   yacc.py:2687:    ENTERO          shift and go to state 55
   yacc.py:2687:    DECIMAL         shift and go to state 56
   yacc.py:2687:    CADENA          shift and go to state 57
   yacc.py:2687:    CORIZQ          shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    valor_asignacion               shift and go to state 63
   yacc.py:2714:    expresion                      shift and go to state 65
   yacc.py:2714:    expresion_numerica             shift and go to state 39
   yacc.py:2714:    expresion_logica               shift and go to state 40
   yacc.py:2714:    expresion_concatenar           shift and go to state 41
   yacc.py:2714:    expresion_acceso_lista         shift and go to state 42
   yacc.py:2714:    llamada_funcion_expr           shift and go to state 43
   yacc.py:2714:    expresion_agrupada             shift and go to state 44
   yacc.py:2714:    constantes                     shift and go to state 45
   yacc.py:2714:    expresion_lista                shift and go to state 46
   yacc.py:2714:    id                             shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 155
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER . PTCOMA
   yacc.py:2566:
   yacc.py:2687:    PTCOMA          shift and go to state 159
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 156
   yacc.py:2563:
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER
   yacc.py:2566:
   yacc.py:2687:    LLAVIZQ         shift and go to state 160
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 157
   yacc.py:2563:
   yacc.py:2565:    (60) def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ID              reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    MIENTRAS        reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    IF              reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEF             reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    RETURN          reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEL             reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    FOR             reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    NUMERO          reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LISTA           reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    BOOLEANO        reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    TEXTO           reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    $end            reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LLAVDER         reduce using rule 60 (def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 158
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ . instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    instrucciones                  shift and go to state 161
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 159
   yacc.py:2563:
   yacc.py:2565:    (76) append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    ID              reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    MIENTRAS        reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    IF              reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    DEF             reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    RETURN          reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    DEL             reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    FOR             reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    NUMERO          reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    LISTA           reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    BOOLEANO        reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    TEXTO           reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    $end            reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2687:    LLAVDER         reduce using rule 76 (append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 160
   yacc.py:2563:
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
   yacc.py:2565:    (2) instrucciones -> . instrucciones instruccion
   yacc.py:2565:    (3) instrucciones -> . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instrucciones                  shift and go to state 162
   yacc.py:2714:    instruccion                    shift and go to state 3
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 161
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones . LLAVDER
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    LLAVDER         shift and go to state 163
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 162
   yacc.py:2563:
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
   yacc.py:2565:    (2) instrucciones -> instrucciones . instruccion
   yacc.py:2565:    (4) instruccion -> . imprimir_instr
   yacc.py:2565:    (5) instruccion -> . definicion_instr
   yacc.py:2565:    (6) instruccion -> . asignacion_instr
   yacc.py:2565:    (7) instruccion -> . mientras_instr
   yacc.py:2565:    (8) instruccion -> . if_instr
   yacc.py:2565:    (9) instruccion -> . if_else_instr
   yacc.py:2565:    (10) instruccion -> . def_funcion_instr
   yacc.py:2565:    (11) instruccion -> . return_instr
   yacc.py:2565:    (12) instruccion -> . llamada_funcion_instr
   yacc.py:2565:    (13) instruccion -> . append_instr
   yacc.py:2565:    (14) instruccion -> . del_instr
   yacc.py:2565:    (15) instruccion -> . for_instr
   yacc.py:2565:    (16) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
   yacc.py:2565:    (22) definicion_instr -> . tipo_def ID PTCOMA
   yacc.py:2565:    (23) definicion_instr -> . tipo_def ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (24) asignacion_instr -> . ID IGUAL valor_asignacion PTCOMA
   yacc.py:2565:    (40) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (42) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (43) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (60) def_funcion_instr -> . DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (65) return_instr -> . RETURN expresion PTCOMA
   yacc.py:2565:    (66) return_instr -> . RETURN PTCOMA
   yacc.py:2565:    (71) llamada_funcion_instr -> . ID PARIZQ lista_expresiones PARDER PTCOMA
   yacc.py:2565:    (72) llamada_funcion_instr -> . ID PARIZQ PARDER PTCOMA
   yacc.py:2565:    (76) append_instr -> . ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA
   yacc.py:2565:    (77) del_instr -> . DEL ID CORIZQ expresion CORDER PTCOMA
   yacc.py:2565:    (41) for_instr -> . FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER
   yacc.py:2565:    (17) tipo_def -> . NUMERO
   yacc.py:2565:    (18) tipo_def -> . LISTA
   yacc.py:2565:    (19) tipo_def -> . BOOLEANO
   yacc.py:2565:    (20) tipo_def -> . TEXTO
   yacc.py:2565:    (21) tipo_def -> . ID
   yacc.py:2566:
   yacc.py:2687:    LLAVDER         shift and go to state 164
   yacc.py:2687:    IMPRIMIR        shift and go to state 16
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2687:    MIENTRAS        shift and go to state 19
   yacc.py:2687:    IF              shift and go to state 20
   yacc.py:2687:    DEF             shift and go to state 21
   yacc.py:2687:    RETURN          shift and go to state 22
   yacc.py:2687:    DEL             shift and go to state 23
   yacc.py:2687:    FOR             shift and go to state 24
   yacc.py:2687:    NUMERO          shift and go to state 25
   yacc.py:2687:    LISTA           shift and go to state 26
   yacc.py:2687:    BOOLEANO        shift and go to state 27
   yacc.py:2687:    TEXTO           shift and go to state 28
   yacc.py:2689:
   yacc.py:2714:    instruccion                    shift and go to state 29
   yacc.py:2714:    imprimir_instr                 shift and go to state 4
   yacc.py:2714:    definicion_instr               shift and go to state 5
   yacc.py:2714:    asignacion_instr               shift and go to state 6
   yacc.py:2714:    mientras_instr                 shift and go to state 7
   yacc.py:2714:    if_instr                       shift and go to state 8
   yacc.py:2714:    if_else_instr                  shift and go to state 9
   yacc.py:2714:    def_funcion_instr              shift and go to state 10
   yacc.py:2714:    return_instr                   shift and go to state 11
   yacc.py:2714:    llamada_funcion_instr          shift and go to state 12
   yacc.py:2714:    append_instr                   shift and go to state 13
   yacc.py:2714:    del_instr                      shift and go to state 14
   yacc.py:2714:    for_instr                      shift and go to state 15
   yacc.py:2714:    tipo_def                       shift and go to state 17
   yacc.py:2561:
   yacc.py:2562:state 163
   yacc.py:2563:
   yacc.py:2565:    (41) for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ID              reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    MIENTRAS        reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    IF              reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEF             reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    RETURN          reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEL             reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    FOR             reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    NUMERO          reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LISTA           reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    BOOLEANO        reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    TEXTO           reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    $end            reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LLAVDER         reduce using rule 41 (for_instr -> FOR PARIZQ definicion_instr expresion_logica PTCOMA asignacion_instr PARDER LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 164
   yacc.py:2563:
   yacc.py:2565:    (43) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .
   yacc.py:2566:
   yacc.py:2687:    IMPRIMIR        reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    ID              reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    MIENTRAS        reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    IF              reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEF             reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    RETURN          reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    DEL             reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    FOR             reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    NUMERO          reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LISTA           reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    BOOLEANO        reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    TEXTO           reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    $end            reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2687:    LLAVDER         reduce using rule 43 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
   yacc.py:2689:
