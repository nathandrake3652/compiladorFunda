
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMAleftCONCATleftMAYQUEMENQUEIGUALQUENIGUALQUEleftMASMENOSleftPORDIVIDIDOrightUMENOSAPPEND BOOLEANO CADENA COMA CONCAT CORDER CORIZQ DECIMAL DEF DEL DIVIDIDO ELSE ENTERO FALSE ID IF IGUAL IGUALQUE IMPRIMIR LISTA LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE NUMERO PARDER PARIZQ POR PTCOMA RETURN TEXTO TRUEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instr\n                        | def_funcion_instr\n                        | return_instr\n                        | llamada_funcion_instr\n                        | append_instr\n                        | del_instrimprimir_instr     : IMPRIMIR PARIZQ expresion PARDER PTCOMAtipo_def         : NUMERO \n                        | LISTA \n                        | BOOLEANO\n                        | TEXTOtipo_def : IDdefinicion_instr   : tipo_def ID PTCOMA\n                          | tipo_def ID IGUAL valor_asignacion PTCOMAasignacion_instr : ID IGUAL valor_asignacion PTCOMAvalor_asignacion : expresionexpresion : expresion_numerica\n                 | expresion_logica\n                 | expresion_concatenar\n                 | expresion_acceso_lista\n                 | llamada_funcion_expr\n                 | expresion_agrupada\n                 | constantes\n                 | expresion_lista\n                 | idexpresion_agrupada : PARIZQ expresion PARDERconstantes : ENTERO\n                  | DECIMAL\n                  | CADENAid : IDmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion MAS expresion\n                        | expresion MENOS expresion\n                        | expresion POR expresion\n                        | expresion DIVIDIDO expresionexpresion_numerica : MENOS expresion %prec UMENOSexpresion_concatenar : expresion CONCAT expresionexpresion_logica : expresion MAYQUE expresion\n                        | expresion MENQUE expresion\n                        | expresion IGUALQUE expresion\n                        | expresion NIGUALQUE expresionexpresion_logica : TRUE\n                        | FALSEempty :def_funcion_instr : DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDERlista_parametros : parametros\n                        | emptyparametros : parametros COMA ID\n                  | IDreturn_instr     : RETURN expresion PTCOMA\n                        | RETURN PTCOMAlista_expresiones : lista_expresiones COMA expresion\n                         | expresionllamada_funcion_expr : ID PARIZQ lista_expresiones PARDER \n                       | ID PARIZQ PARDERllamada_funcion_instr : ID PARIZQ lista_expresiones PARDER PTCOMA\n                             | ID PARIZQ PARDER PTCOMAexpresion_lista : CORIZQ lista_expresiones CORDER\n                       | CORIZQ CORDERexpresion_acceso_lista : ID CORIZQ expresion CORDERappend_instr : ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMAdel_instr : DEL ID CORIZQ expresion CORDER PTCOMA'
    
_lr_action_items = {'IMPRIMIR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,15,15,15,15,15,-72,-39,-40,15,-55,-71,15,15,-41,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,20,21,22,23,24,25,26,27,28,30,31,32,33,36,46,50,51,57,58,68,69,70,71,72,73,74,75,76,77,78,80,81,85,88,89,91,92,114,115,117,119,120,122,126,127,128,129,131,133,134,135,138,139,140,141,142,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,29,-20,34,49,55,-16,-17,-18,-19,-2,49,49,49,49,49,-61,49,49,49,-21,49,95,-60,49,49,49,49,49,49,49,49,49,49,49,49,-23,116,49,-67,-15,-22,-66,17,17,130,49,17,17,17,-72,-39,-40,17,-55,-71,17,17,-41,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,18,18,18,18,18,-72,-39,-40,18,-55,-71,18,18,-41,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,19,19,19,19,19,-72,-39,-40,19,-55,-71,19,19,-41,]),'DEF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,20,20,20,20,20,-72,-39,-40,20,-55,-71,20,20,-41,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,21,21,21,21,21,-72,-39,-40,21,-55,-71,21,21,-41,]),'DEL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,22,22,22,22,22,-72,-39,-40,22,-55,-71,22,22,-41,]),'NUMERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,23,23,23,23,23,-72,-39,-40,23,-55,-71,23,23,-41,]),'LISTA':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,24,24,24,24,24,-72,-39,-40,24,-55,-71,24,24,-41,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,25,25,25,25,25,-72,-39,-40,25,-55,-71,25,25,-41,]),'TEXTO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,119,120,127,128,129,131,133,134,135,138,139,140,141,142,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,26,26,26,26,26,-72,-39,-40,26,-55,-71,26,26,-41,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,131,133,134,138,139,142,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,-72,-39,-40,-55,-71,-41,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,13,14,27,36,57,69,88,92,114,115,117,127,128,131,133,134,135,138,139,141,142,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-2,-61,-21,-60,-23,-67,-15,-22,-66,133,134,-72,-39,-40,138,-55,-71,142,-41,]),'PARIZQ':([15,17,18,19,21,28,30,31,32,33,34,46,49,50,51,58,60,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[28,31,32,33,51,51,51,51,51,51,68,51,81,51,51,51,89,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'IGUAL':([17,29,],[30,58,]),'PTCOMA':([21,29,35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,59,61,63,79,83,86,87,90,99,100,101,102,103,104,105,106,107,110,111,112,123,124,125,136,],[36,57,69,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,88,-24,92,-46,-69,114,115,117,-42,-43,-44,-45,-48,-49,-50,-51,-47,-65,-68,-34,-70,-64,131,139,]),'MENOS':([21,28,30,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,58,61,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,91,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,126,132,],[46,46,46,46,46,46,71,-25,-26,-27,-28,-29,-30,-31,-32,-33,46,-52,-53,-38,46,46,-35,-36,-37,71,46,71,71,-26,71,-26,46,46,46,46,46,46,46,46,46,-46,46,46,-69,71,46,46,-42,-43,-44,-45,71,71,71,71,71,71,-65,-68,-34,71,71,-70,-64,46,71,]),'TRUE':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'FALSE':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'ENTERO':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'DECIMAL':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'CADENA':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'CORIZQ':([21,28,30,31,32,33,46,49,50,51,55,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[50,50,50,50,50,50,50,80,50,50,85,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'APPEND':([30,],[60,]),'PARDER':([31,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,62,64,65,67,68,79,81,83,84,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,118,123,124,130,132,],[63,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,86,90,-63,93,94,-54,-46,110,-69,112,-59,121,-56,-57,-42,-43,-44,-45,-48,-49,-50,-51,-47,124,-65,-68,-34,-62,-70,-64,-58,136,]),'MAS':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[70,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,70,70,70,-26,70,-26,-46,-69,70,-42,-43,-44,-45,70,70,70,70,70,70,-65,-68,-34,70,70,-70,-64,70,]),'POR':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[72,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,72,72,72,-26,72,-26,-46,-69,72,72,72,-44,-45,72,72,72,72,72,72,-65,-68,-34,72,72,-70,-64,72,]),'DIVIDIDO':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,73,73,73,-26,73,-26,-46,-69,73,73,73,-44,-45,73,73,73,73,73,73,-65,-68,-34,73,73,-70,-64,73,]),'MAYQUE':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[74,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,74,74,74,-26,74,-26,-46,-69,74,-42,-43,-44,-45,-48,-49,-50,-51,74,74,-65,-68,-34,74,74,-70,-64,74,]),'MENQUE':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[75,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,75,75,75,-26,75,-26,-46,-69,75,-42,-43,-44,-45,-48,-49,-50,-51,75,75,-65,-68,-34,75,75,-70,-64,75,]),'IGUALQUE':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[76,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,76,76,76,-26,76,-26,-46,-69,76,-42,-43,-44,-45,-48,-49,-50,-51,76,76,-65,-68,-34,76,76,-70,-64,76,]),'NIGUALQUE':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[77,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,77,77,77,-26,77,-26,-46,-69,77,-42,-43,-44,-45,-48,-49,-50,-51,77,77,-65,-68,-34,77,77,-70,-64,77,]),'CONCAT':([35,37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,56,61,64,65,66,67,79,83,84,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,132,],[78,-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,78,78,78,-26,78,-26,-46,-69,78,-42,-43,-44,-45,-48,-49,-50,-51,-47,78,-65,-68,-34,78,78,-70,-64,78,]),'COMA':([37,38,39,40,41,42,43,44,45,47,48,49,52,53,54,62,64,79,82,83,95,97,99,100,101,102,103,104,105,106,107,109,110,111,112,116,118,123,124,130,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,-35,-36,-37,91,-63,-46,91,-69,-59,122,-42,-43,-44,-45,-48,-49,-50,-51,-47,91,-65,-68,-34,126,-62,-70,-64,-58,]),'CORDER':([37,38,39,40,41,42,43,44,45,47,48,49,50,52,53,54,64,79,82,83,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,123,124,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,-52,-53,-38,83,-35,-36,-37,-63,-46,111,-69,-42,-43,-44,-45,-48,-49,-50,-51,-47,123,-65,-68,-34,125,-62,-70,-64,]),'LLAVIZQ':([93,94,121,137,],[119,120,129,140,]),'ELSE':([134,],[137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,119,120,129,140,],[2,127,128,135,141,]),'instruccion':([0,2,119,120,127,128,129,135,140,141,],[3,27,3,3,27,27,3,27,3,27,]),'imprimir_instr':([0,2,119,120,127,128,129,135,140,141,],[4,4,4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,119,120,127,128,129,135,140,141,],[5,5,5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,119,120,127,128,129,135,140,141,],[6,6,6,6,6,6,6,6,6,6,]),'mientras_instr':([0,2,119,120,127,128,129,135,140,141,],[7,7,7,7,7,7,7,7,7,7,]),'if_instr':([0,2,119,120,127,128,129,135,140,141,],[8,8,8,8,8,8,8,8,8,8,]),'if_else_instr':([0,2,119,120,127,128,129,135,140,141,],[9,9,9,9,9,9,9,9,9,9,]),'def_funcion_instr':([0,2,119,120,127,128,129,135,140,141,],[10,10,10,10,10,10,10,10,10,10,]),'return_instr':([0,2,119,120,127,128,129,135,140,141,],[11,11,11,11,11,11,11,11,11,11,]),'llamada_funcion_instr':([0,2,119,120,127,128,129,135,140,141,],[12,12,12,12,12,12,12,12,12,12,]),'append_instr':([0,2,119,120,127,128,129,135,140,141,],[13,13,13,13,13,13,13,13,13,13,]),'del_instr':([0,2,119,120,127,128,129,135,140,141,],[14,14,14,14,14,14,14,14,14,14,]),'tipo_def':([0,2,119,120,127,128,129,135,140,141,],[16,16,16,16,16,16,16,16,16,16,]),'expresion':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[35,56,61,64,66,66,79,64,84,61,99,100,101,102,103,104,105,106,107,108,64,113,118,132,]),'expresion_numerica':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'expresion_logica':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[38,38,38,38,65,67,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'expresion_concatenar':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'expresion_acceso_lista':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'llamada_funcion_expr':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'expresion_agrupada':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'constantes':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'expresion_lista':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'id':([21,28,30,31,32,33,46,50,51,58,70,71,72,73,74,75,76,77,78,80,81,85,91,126,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'valor_asignacion':([30,58,],[59,87,]),'lista_expresiones':([31,50,81,],[62,82,109,]),'lista_parametros':([68,],[96,]),'parametros':([68,],[97,]),'empty':([68,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica.py',159),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica.py',163),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica.py',169),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','gramatica.py',173),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','gramatica.py',174),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','gramatica.py',175),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','gramatica.py',176),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','gramatica.py',177),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','gramatica.py',178),
  ('instruccion -> def_funcion_instr','instruccion',1,'p_instruccion','gramatica.py',179),
  ('instruccion -> return_instr','instruccion',1,'p_instruccion','gramatica.py',180),
  ('instruccion -> llamada_funcion_instr','instruccion',1,'p_instruccion','gramatica.py',181),
  ('instruccion -> append_instr','instruccion',1,'p_instruccion','gramatica.py',182),
  ('instruccion -> del_instr','instruccion',1,'p_instruccion','gramatica.py',183),
  ('imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','gramatica.py',189),
  ('tipo_def -> NUMERO','tipo_def',1,'p_tipo_def','gramatica.py',193),
  ('tipo_def -> LISTA','tipo_def',1,'p_tipo_def','gramatica.py',194),
  ('tipo_def -> BOOLEANO','tipo_def',1,'p_tipo_def','gramatica.py',195),
  ('tipo_def -> TEXTO','tipo_def',1,'p_tipo_def','gramatica.py',196),
  ('tipo_def -> ID','tipo_def',1,'p_tipo_def_id','gramatica.py',200),
  ('definicion_instr -> tipo_def ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','gramatica.py',204),
  ('definicion_instr -> tipo_def ID IGUAL valor_asignacion PTCOMA','definicion_instr',5,'p_instruccion_definicion','gramatica.py',205),
  ('asignacion_instr -> ID IGUAL valor_asignacion PTCOMA','asignacion_instr',4,'p_asignacion_instr','gramatica.py',212),
  ('valor_asignacion -> expresion','valor_asignacion',1,'p_valor_asignacion','gramatica.py',216),
  ('expresion -> expresion_numerica','expresion',1,'p_expresion','gramatica.py',221),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','gramatica.py',222),
  ('expresion -> expresion_concatenar','expresion',1,'p_expresion','gramatica.py',223),
  ('expresion -> expresion_acceso_lista','expresion',1,'p_expresion','gramatica.py',224),
  ('expresion -> llamada_funcion_expr','expresion',1,'p_expresion','gramatica.py',225),
  ('expresion -> expresion_agrupada','expresion',1,'p_expresion','gramatica.py',226),
  ('expresion -> constantes','expresion',1,'p_expresion','gramatica.py',227),
  ('expresion -> expresion_lista','expresion',1,'p_expresion','gramatica.py',228),
  ('expresion -> id','expresion',1,'p_expresion','gramatica.py',229),
  ('expresion_agrupada -> PARIZQ expresion PARDER','expresion_agrupada',3,'p_expresion_agrupada','gramatica.py',233),
  ('constantes -> ENTERO','constantes',1,'p_constantes','gramatica.py',237),
  ('constantes -> DECIMAL','constantes',1,'p_constantes','gramatica.py',238),
  ('constantes -> CADENA','constantes',1,'p_constantes','gramatica.py',239),
  ('id -> ID','id',1,'p_id','gramatica.py',247),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','gramatica.py',252),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','gramatica.py',256),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','gramatica.py',260),
  ('expresion_numerica -> expresion MAS expresion','expresion_numerica',3,'p_expresion_binaria','gramatica.py',264),
  ('expresion_numerica -> expresion MENOS expresion','expresion_numerica',3,'p_expresion_binaria','gramatica.py',265),
  ('expresion_numerica -> expresion POR expresion','expresion_numerica',3,'p_expresion_binaria','gramatica.py',266),
  ('expresion_numerica -> expresion DIVIDIDO expresion','expresion_numerica',3,'p_expresion_binaria','gramatica.py',267),
  ('expresion_numerica -> MENOS expresion','expresion_numerica',2,'p_expresion_unaria','gramatica.py',274),
  ('expresion_concatenar -> expresion CONCAT expresion','expresion_concatenar',3,'p_expresion_concatenar','gramatica.py',280),
  ('expresion_logica -> expresion MAYQUE expresion','expresion_logica',3,'p_expresion_logica_binaria','gramatica.py',285),
  ('expresion_logica -> expresion MENQUE expresion','expresion_logica',3,'p_expresion_logica_binaria','gramatica.py',286),
  ('expresion_logica -> expresion IGUALQUE expresion','expresion_logica',3,'p_expresion_logica_binaria','gramatica.py',287),
  ('expresion_logica -> expresion NIGUALQUE expresion','expresion_logica',3,'p_expresion_logica_binaria','gramatica.py',288),
  ('expresion_logica -> TRUE','expresion_logica',1,'p_expresion_logica_unaria','gramatica.py',297),
  ('expresion_logica -> FALSE','expresion_logica',1,'p_expresion_logica_unaria','gramatica.py',298),
  ('empty -> <empty>','empty',0,'p_empty','gramatica.py',304),
  ('def_funcion_instr -> DEF ID PARIZQ lista_parametros PARDER LLAVIZQ instrucciones LLAVDER','def_funcion_instr',8,'p_def_funcion_instr','gramatica.py',308),
  ('lista_parametros -> parametros','lista_parametros',1,'p_lista_parametros','gramatica.py',312),
  ('lista_parametros -> empty','lista_parametros',1,'p_lista_parametros','gramatica.py',313),
  ('parametros -> parametros COMA ID','parametros',3,'p_parametros','gramatica.py',320),
  ('parametros -> ID','parametros',1,'p_parametros','gramatica.py',321),
  ('return_instr -> RETURN expresion PTCOMA','return_instr',3,'p_return_instr','gramatica.py',330),
  ('return_instr -> RETURN PTCOMA','return_instr',2,'p_return_instr','gramatica.py',331),
  ('lista_expresiones -> lista_expresiones COMA expresion','lista_expresiones',3,'p_lista_expresiones','gramatica.py',338),
  ('lista_expresiones -> expresion','lista_expresiones',1,'p_lista_expresiones','gramatica.py',339),
  ('llamada_funcion_expr -> ID PARIZQ lista_expresiones PARDER','llamada_funcion_expr',4,'p_llamada_funcion_expr','gramatica.py',348),
  ('llamada_funcion_expr -> ID PARIZQ PARDER','llamada_funcion_expr',3,'p_llamada_funcion_expr','gramatica.py',349),
  ('llamada_funcion_instr -> ID PARIZQ lista_expresiones PARDER PTCOMA','llamada_funcion_instr',5,'p_llamada_funcion_instr','gramatica.py',356),
  ('llamada_funcion_instr -> ID PARIZQ PARDER PTCOMA','llamada_funcion_instr',4,'p_llamada_funcion_instr','gramatica.py',357),
  ('expresion_lista -> CORIZQ lista_expresiones CORDER','expresion_lista',3,'p_expresion_lista','gramatica.py',365),
  ('expresion_lista -> CORIZQ CORDER','expresion_lista',2,'p_expresion_lista','gramatica.py',366),
  ('expresion_acceso_lista -> ID CORIZQ expresion CORDER','expresion_acceso_lista',4,'p_expresion_acceso_lista','gramatica.py',374),
  ('append_instr -> ID IGUAL APPEND PARIZQ ID COMA expresion PARDER PTCOMA','append_instr',9,'p_append_lista','gramatica.py',379),
  ('del_instr -> DEL ID CORIZQ expresion CORDER PTCOMA','del_instr',6,'p_del_lista','gramatica.py',384),
]
